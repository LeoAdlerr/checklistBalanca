# =======================================================
# Containerfile Multi-Stage para Produ√ß√£o (Frontend)
# Vers√£o corrigida para build com depend√™ncias E2E
# =======================================================

# --- EST√ÅGIO 1: Build Stage ---
# Usamos a imagem node:20-slim, pois ela √© a base para as depend√™ncias do Cypress
FROM node:20-slim AS builder

# Define o diret√≥rio de trabalho
WORKDIR /app

# Instala as depend√™ncias do sistema para o Cypress e Chromium
# Esta √© a lista m√≠nima de pacotes que voc√™ forneceu, garantindo que tudo funcione.
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    gnupg \
    libgtk-3-0 \
    libnss3 \
    libasound2 \
    libxss1 \
    libx11-xcb1 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libxshmfence1 \
    libgbm1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxcb1 \
    libxtst6 \
    libpangocairo-1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    fonts-liberation \
    libappindicator3-1 \
    libdbus-1-3 \
    xvfb \
    dos2unix \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copia os arquivos de depend√™ncias e instala-as
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Copia o restante do c√≥digo da aplica√ß√£o
COPY . .

# Converte e garante permiss√£o nos scripts
RUN dos2unix ./entrypoint.sh ./wait-for-it.sh && \
    chmod +x ./entrypoint.sh ./wait-for-it.sh

# --- Etapas de Teste antes da Build ---
# Agora, vamos rodar os testes unit√°rios e E2E.
# O `wait-for-it.sh` n√£o pode ser usado aqui, pois a build √© isolada.
# Por isso, vamos assumir que o backend √© um mock ou que a sua pipeline de CI/CD
# garante que esses testes rodem em um ambiente adequado.
RUN echo "üß™ Frontend: Executando testes unit√°rios..." && yarn test:unit
RUN echo "üöÄ Frontend: Executando testes E2E..." && yarn test:e2e

# Executa o script de build para gerar a pasta /dist
RUN echo "üèóÔ∏è Frontend: Gerando build de produ√ß√£o..." && yarn build


# --- EST√ÅGIO 2: Production Stage ---
# Come√ßamos com uma imagem nova e super leve do Nginx
FROM nginx:1.25-alpine

# Remove a p√°gina de boas-vindas padr√£o do Nginx
RUN rm -rf /usr/share/nginx/html/*

# Copia a configura√ß√£o customizada do Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copia os ficheiros est√°ticos constru√≠dos no est√°gio 'builder'
COPY --from=builder /app/dist /usr/share/nginx/html

# Exp√µe a porta 80, que √© a porta padr√£o do Nginx
EXPOSE 80

# Comando para iniciar o Nginx.
CMD ["nginx", "-g", "daemon off;"]