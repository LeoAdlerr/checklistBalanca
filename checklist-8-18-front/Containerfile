# =======================================================
# Containerfile Multi-Stage para Produ√ß√£o (Frontend)
# Vers√£o com Execu√ß√£o de Testes
# =======================================================

# --- EST√ÅGIO 1: Build Stage ---
# Usamos uma imagem Node para ter acesso ao Yarn e √†s ferramentas de build
FROM node:20-alpine AS builder

# Define o diret√≥rio de trabalho
WORKDIR /app

# Copia os ficheiros de depend√™ncias e instala-as
# Isto aproveita o cache do Docker se as depend√™ncias n√£o mudarem
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Copia o resto do c√≥digo da aplica√ß√£o
COPY . .

# --- Etapas de Teste antes da Build ---
# Agora, vamos rodar os testes antes de qualquer outra coisa.
# Se qualquer um dos testes falhar, a build ir√° parar aqui.
RUN echo "üß™ Frontend: Executando testes unit√°rios..." && yarn test:unit
RUN echo "üöÄ Frontend: Executando testes E2E..." && yarn test:e2e

# Executa o script de build para gerar a pasta /dist
RUN echo "üèóÔ∏è Frontend: Gerando build de produ√ß√£o..." && yarn build


# --- EST√ÅGIO 2: Production Stage ---
# Come√ßamos com uma imagem nova e super leve do Nginx
FROM nginx:1.25-alpine

# Remove a p√°gina de boas-vindas padr√£o do Nginx
RUN rm -rf /usr/share/nginx/html/*

# Copia a configura√ß√£o customizada do Nginx que criamos
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copia os ficheiros est√°ticos constru√≠dos no est√°gio 'builder'
# para o diret√≥rio que o Nginx serve por padr√£o
COPY --from=builder /app/dist /usr/share/nginx/html

# Exp√µe a porta 80, que √© a porta padr√£o do Nginx
EXPOSE 80

# Comando para iniciar o Nginx em primeiro plano
CMD ["nginx", "-g", "daemon off;"]